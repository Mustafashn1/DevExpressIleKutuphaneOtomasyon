using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Microsoft.EntityFrameworkCore;
using Npgsql;

namespace deneme12
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        private readonly Context _context;


        public Form1(Context context)
        {
            InitializeComponent();
            _context = context;

            // Veritabanı işlemlerini burada gerçekleştirin.
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            deneme12.Context dbContext = new deneme12.Context();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Books.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.Books.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());



        }

        NpgsqlConnection baglanti = new NpgsqlConnection("Host=195.142.235.185;Port=5432;Username=unvocalrage;Password=b9C4Zl5yaI2r0EaAF0oU;Database=MustafaLibraryApp");

        private void Form1_Load(object sender, EventArgs e)
        {
            ListeyiGuncelle();
        }

       

        public void ListeyiGuncelle()
        {
            using (var dbContext = new Context())
            {
                dbContext.Books.Load(); // Veritabanından kitapları yükle
                gridControl1.DataSource = dbContext.Books.Local.ToBindingList(); // GridControl'e verileri bağla
            }
        }



        private void BtnEkle_Click_1(object sender, EventArgs e)
        {
            // Düzenleme formunu başlat ve göster
            DüzenleFrm df = new DüzenleFrm(null); // Yeni kitap eklemek için null geçiyoruz
            df.Owner = this;
            df.Show(); // Formu modal olarak aç

            // Listeyi güncelle
            ListeyiGuncelle(); // Kitaplar listesini güncelle
        }


        private void repositoryItemButtonEdit1_Click(object sender, EventArgs e)
        {
            // Seçili satırı al
            var selectedKitap = gridView1.GetFocusedRow() as Book;

            if (selectedKitap == null)
            {
                XtraMessageBox.Show("Herhangi bir kitap seçilmedi. Lütfen silmek için bir kitap seçin.", "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Silme onayı al
            if (XtraMessageBox.Show($"{selectedKitap.KitapAd} adlı kitabı silmek istediğinize emin misiniz?", "Onay", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                using (var dbContext = new Context())
                {
                    // Seçili kitabı veritabanından bul
                    var kitapToDelete = dbContext.Books.Find(selectedKitap.Kitapid); // Id, silmek istediğin kitabın benzersiz kimliği

                    if (kitapToDelete != null)
                    {
                        // Silme işlemi
                        dbContext.Books.Remove(kitapToDelete);
                        dbContext.SaveChanges(); // Değişiklikleri kaydet

                        // Kullanıcıya bilgi ver
                        XtraMessageBox.Show($"{selectedKitap.KitapAd} başarıyla silindi.", "Başarılı", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        // Listeyi güncelle
                        ListeyiGuncelle(); // Kitap silindikten sonra listeyi güncelle
                    }
                    else
                    {
                        XtraMessageBox.Show("Kitap bulunamadı.", "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        public void Düzenle_Click(object sender, EventArgs e)
        {
            int selectedRowHandle = gridView1.FocusedRowHandle;
            if (selectedRowHandle >= 0)
            {
                // Seçilen satırın verilerini al
                var selectedBook = gridView1.GetRow(selectedRowHandle) as Book;

                if (selectedBook != null)
                {
                    // Düzenleme formunu aç ve veriyi geçir
                    DüzenleFrm df = new DüzenleFrm(selectedBook);
                    df.Owner = this; // Ana formu sahip olarak ayarla

                    if (df.ShowDialog() == DialogResult.OK)
                    {
                        // Listeyi güncelle
                        ListeyiGuncelle(); // Kitaplar listesini güncelle
                    }
                }
            }
        }

        private void UpdateBookInDatabase(Book updatedBook)
        {
            try
            {
                using (var dbContext = new Context())
                {
                    // Veritabanındaki mevcut kitabı bul
                    var existingBook = dbContext.Books.Find(updatedBook.Kitapid);
                    if (existingBook != null)
                    {
                        // Kitap bilgilerini güncelle
                        existingBook.KitapAd = updatedBook.KitapAd;
                        existingBook.Yazar = updatedBook.Yazar;
                        existingBook.Sayfa = updatedBook.Sayfa;
                        existingBook.Tur = updatedBook.Tur;

                        dbContext.SaveChanges(); // Güncellemeleri kaydet
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Bir hata oluştu: {ex.Message}", "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void pictureBox1_Click_1(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
}
